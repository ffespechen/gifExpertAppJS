{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","imgs","then","useFetchGifs","key","GiftExpertApp","categories","ReactDOM","render","GifExpertApp","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAAoB,EAEdC,mBAAS,IAFK,mBAE3CC,EAF2C,KAE/BC,EAF+B,KAmBlD,OAEC,0BAAMC,SAZc,SAAEC,GACtBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAQd,2BACCO,KAAK,OACLC,MAAQT,EACRU,SArBuB,SAAEP,GAE3BF,EAAeE,EAAEQ,OAAOF,YCPbG,EAAc,SAAC,GAAwB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEzC,OACC,yBAAKC,UAAU,4BACd,yBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,2BAAKA,K,uBCNMK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEhBN,EAFgB,iDAEiCO,UAAWF,GAF5C,+DAGHG,MAAMR,GAHH,cAGhBS,EAHgB,gBAICA,EAAKC,OAJN,uBAIdC,EAJc,EAIdA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAEtB,MAAO,CACNhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QAXb,kBAgBdY,GAhBc,4CAAH,sDCKRK,EAAU,SAAC,GAAmB,IAAhBZ,EAAe,EAAfA,SAAe,ECFd,SAAEA,GAAc,IAAD,EAEhBrB,mBAAS,CAClC2B,KAAM,GACNO,SAAS,IAJgC,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAgB1C,OATAC,qBAAW,SAAEC,GAEZlB,EAASC,GACRkB,MAAM,SAAAD,GAAI,OAAIF,EAAS,CACvBT,KAAMW,EACNJ,SAAS,SAER,CAAEb,IAEEc,EDXmBK,CAAcnB,GAAhCM,EAHiC,EAGjCA,KAAMO,EAH2B,EAG3BA,QAcd,OACC,kBAAC,WAAD,KACC,4BAAMb,GAEJa,GAAW,0CAEb,yBAAKjB,UAAU,aACbU,EAAKE,KAAK,SAACC,GAAD,OACV,kBAAC,EAAD,eACAW,IAAKX,EAAIhB,IACJgB,UEEKY,EA9BO,WAAO,IAAD,EAES1C,mBAAU,CAAC,iBAFpB,mBAEpB2C,EAFoB,KAER5C,EAFQ,KAU3B,OACC,kBAAC,WAAD,KACC,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BACG4C,EAAWd,KAAK,SAACR,GAAD,OACjB,kBAAC,EAAD,CACAA,SAAYA,EACZoB,IAAKpB,UCnBVuB,IAASC,OAEL,kBAACC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.6c46e72e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories }) => {\n\n\tconst [inputValue, setInputValue] = useState('');\n\n\tconst handleInputChange = ( e ) =>{\n\n\t\tsetInputValue( e.target.value )\n\t};\n\n\tconst handleSubmit = ( e ) =>{\n\t\te.preventDefault();\n\n\t\tif( inputValue.trim().length > 2){\n\t\t\tsetCategories( cats => [inputValue, ...cats]);\n\t\t\tsetInputValue('');\n\t\t};\n\t\t\n\t};\n\n\treturn(\n\n\t\t<form onSubmit={ handleSubmit }>\n\t\t\t<input\n\t\t\t\ttype='text'\n\t\t\t\tvalue={ inputValue }\n\t\t\t\tonChange={ handleInputChange } \n\t\t\t/>\n\t\t</form>\n\n\t\t);\n\n};\n\nAddCategory.propTypes = {\n\tsetCategories : PropTypes.func.isRequired,\n}","import React from 'react';\n\nexport const GifGridItem = ( { id, title, url } ) =>{\n\n\treturn(\n\t\t<div className=\"card animate__backInDown\">\n\t\t\t<img src={ url } alt={ title } />\n\t\t\t<p>{ title }</p>\n\t\t</div>\n\t\t);\n};","\n\texport const getGifs = async ( category ) =>{\n\n\t\tconst url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=qSngglvU21r7axic3gyR0bU9ANWzGInA`;\n\t\tconst resp = await fetch(url);\n\t\tconst { data } = await resp.json();\n\n\t\tconst gifs = data.map( img  =>{\n\n\t\t\treturn {\n\t\t\t\tid: img.id,\n\t\t\t\ttitle: img.title,\n\t\t\t\turl: img.images.downsized_medium.url\n\t\t\t};\n\n\t\t});\n\n\t\treturn( gifs );\n\n\n\t}","import React, { Fragment } from 'react';\nimport { GifGridItem } from './GifGridItem';\n// import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\n\nexport const GifGrid = ( { category } ) =>{\n\n\t// const [images, setImages] = useState([]);\n\tconst { data, loading } = useFetchGifs( category );\n\n\n\t// Este hook previene que la función se re-renderice ante un nuevo evento\n\t// Se ejecuta una sola vez\n\t// El segundo parámetro es la lista (o arreglo) de dependencias de esta función\n\t// useEffect( () => {\n\t// \tgetGifs( category )\n\t// \t.then( imgs => setImages( imgs ) );\n\t// }, []);\n\n\n\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<h3>{ category }</h3>\n\n\t\t\t{ loading && <p>Cargando...</p>}\n\n\t\t\t<div className=\"card-grid\">\n\t\t\t\t{data.map( (img)  => \n\t\t\t\t\t<GifGridItem \n\t\t\t\t\tkey={img.id}\n\t\t\t\t\t{ ...img } /> )}\n\t\t\t</div>\n\t\t</Fragment>\n\t\t);\n}","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( category ) =>{\n\n\tconst [state, setState] = useState({\n\t\tdata: [],\n\t\tloading: true,\n\t});\n\n\tuseEffect( ( imgs ) =>{\n\n\t\tgetGifs( category )\n\t\t.then( imgs => setState({\n\t\t\tdata: imgs,\n\t\t\tloading: false\n\t\t}));\n\t}, [ category ]);\n\n\treturn state;\n\n}","import React, { Fragment, useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nconst GiftExpertApp = () => {\n\n\tconst [categories, setCategories] = useState( ['Transformers'] );\n\n\t// const handleClick = () => {\n\t// \tconst valor = 'Akira';\n\t// \t// setCategories( [...categories, valor] );\n\t// \tsetCategories( (cats) => [...cats, valor]);\n\t// };\n\n\treturn(\n\t\t<Fragment>\n\t\t\t<h2>GifExpertApp</h2>\n\t\t\t<AddCategory setCategories={ setCategories }/>\n\t\t\t<hr />\n\n\t\t\t<ol>\n\t\t\t\t{ categories.map( (category) =>\n\t\t\t\t\t<GifGrid \n\t\t\t\t\tcategory = {category}\n\t\t\t\t\tkey={category} />\n\t\t\t\t\t)}\n\n\t\t\t</ol>\n\n\t\t</Fragment>\n\t\t);\n\n};\n\nexport default GiftExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n\n    <GifExpertApp />, \n\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}